# models.py

from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()

class Role(db.Model):
    RoleID = db.Column(db.Integer, primary_key=True, autoincrement=True)
    RoleName = db.Column(db.String(50), nullable=False)

class User(db.Model):
    UserID = db.Column(db.Integer, primary_key=True, autoincrement=True)
    Username = db.Column(db.String(255), nullable=False)
    Password = db.Column(db.String(255), nullable=False)
    Email = db.Column(db.String(255), nullable=False)
    FirstName = db.Column(db.String(255))
    LastName = db.Column(db.String(255))
    Address = db.Column(db.String(255))
    Phone = db.Column(db.String(15))
    SalaryScale = db.Column(db.Integer)
    HighestAcademicQualificationUniversity = db.Column(db.String(255))
    HighestAcademicQualificationCountry = db.Column(db.String(255))
    HighestAcademicQualificationYear = db.Column(db.Integer)
    AreaOfExpertise = db.Column(db.String(255))
    ExperienceInResearch = db.Column(db.Integer)
    Teaching = db.Column(db.Integer)
    RoleID = db.Column(db.Integer, db.ForeignKey('role.RoleID'), nullable=False)
    ProfilePicLocation = db.Column(db.String(255))
    TotalNumberOfCompleteProjects = db.Column(db.Integer)
    TotalNumberOfCompletePublications = db.Column(db.Integer)
    OngoingProjects = db.Column(db.Integer)
    Role = db.relationship('Role', backref='users')

class StudentUser(db.Model):
    UserID = db.Column(db.Integer, db.ForeignKey('user.UserID'), primary_key=True)
    RoleID = db.Column(db.Integer, db.ForeignKey('role.RoleID'), nullable=False)
    Name = db.Column(db.String(255))
    RegNo = db.Column(db.String(50))
    FirstEnrollmentSemester = db.Column(db.String(50))
    UndergraduateCGPALevel = db.Column(db.String(50))
    Role = db.relationship('Role', backref='student_users')
    User = db.relationship('User', backref='student_user')

class Project(db.Model):
    ProjectID = db.Column(db.Integer, primary_key=True, autoincrement=True)
    CodeByRTC = db.Column(db.String(255))
    DateRecieved = db.Column(db.Date)
    ProjectTitle = db.Column(db.String(255))
    NatureOfResearchProposal = db.Column(db.String(255))
    NameOfCollaboratingDepartments = db.Column(db.String(255))
    AddressOfCollaboratingDepartments = db.Column(db.String(255))
    NameOfCollaboratingInstitutes = db.Column(db.String(255))
    AddressOfCollaboratingInstitutes = db.Column(db.String(255))
    LocationOfFieldActivities = db.Column(db.String(255))
    DurationOfResearchProjectAnnual = db.Column(db.Integer)
    DurationOfResearchProjectLongTerm = db.Column(db.Integer)
    TotalBudgetOfResearchProposalTK = db.Column(db.Integer)
    ExternalAgencyFundingSourcesName = db.Column(db.String(255))
    ExternalAgencyFundingSourcesSubmissionDate = db.Column(db.Date)
    ProjectDescription = db.Column(db.Text)
    ProjectAbstract = db.Column(db.Text)
    ProjectObjective = db.Column(db.Text)
    PstuNationalGoal = db.Column(db.Text)
    PriorResearchOverview = db.Column(db.Text)
    Methodology = db.Column(db.Text)
    ExpectedOutput = db.Column(db.Text)
    SuccessIndicators = db.Column(db.Text)
    Beneficiaries = db.Column(db.Text)
    ManPowerExisting = db.Column(db.String(255))
    ManPowerRequired = db.Column(db.String(255))
    SmallEquipmentExisting = db.Column(db.String(255))
    SmallEquipmentRequired = db.Column(db.String(255))
    ResearchMaterialsExisting = db.Column(db.String(255))
    ResearchMaterialsRequired = db.Column(db.String(255))
    OtherExisting = db.Column(db.String(255))
    OtherRequired = db.Column(db.String(255))
    ResearchCarriedOutPlace = db.Column(db.String(255))
    CreatorUserID = db.Column(db.Integer, db.ForeignKey('user.UserID'), nullable=False)
    CreatorUserDate = db.Column(db.Date)
    CreatorUserSealLocation = db.Column(db.String(255))
    ChairmanOfDepartmentComment = db.Column(db.Text)
    ChairmanOfDepartmentSignatureLocation = db.Column(db.String(255))
    ChairmanOfDepartmentSignatureDate = db.Column(db.Date)
    ResultsAndDiscussion = db.Column(db.Text)
    KeyAchievements = db.Column(db.Text)
    ProjectStatus = db.Column(db.String(50))
    TotalPoints = db.Column(db.Integer)
    ProjectSoftCopyLocation = db.Column(db.String(255))
    CreatorUser = db.relationship('User', backref='projects')

class ProjectListWithUserID(db.Model):
    UserID = db.Column(db.Integer, db.ForeignKey('user.UserID'), primary_key=True)
    ProjectID = db.Column(db.Integer, db.ForeignKey('project.ProjectID'), primary_key=True)
    ProjectTitle = db.Column(db.String(255))
    User = db.relationship('User', backref='project_lists_with_user_id')
    Project = db.relationship('Project', backref='project_list_with_user_id')

class ActivityPlan(db.Model):
    ProjectID = db.Column(db.Integer, db.ForeignKey('project.ProjectID'), primary_key=True)
    ActivityID = db.Column(db.Integer, primary_key=True, autoincrement=True)
    ActivityName = db.Column(db.String(255))
    StartDate = db.Column(db.Date)
    EndDate = db.Column(db.Date)
    Activity = db.Column(db.Text)
    Project = db.relationship('Project', backref='activity_plans')

class Review(db.Model):
    ReviewID = db.Column(db.Integer, primary_key=True, autoincrement=True)
    ProjectID = db.Column(db.Integer, db.ForeignKey('project.ProjectID'), nullable=False)
    ReviewerUserID = db.Column(db.Integer, db.ForeignKey('user.UserID'), nullable=False)
    Comments = db.Column(db.Text)
    Rating = db.Column(db.Integer)
    Points = db.Column(db.Integer)
    Project = db.relationship('Project', backref='reviews')
    ReviewerUser = db.relationship('User', backref='reviews')

class Notification(db.Model):
    NotificationID = db.Column(db.Integer, primary_key=True, autoincrement=True)
    UserID = db.Column(db.Integer, db.ForeignKey('user.UserID'), nullable=False)
    Message = db.Column(db.Text)
    Timestamp = db.Column(db.TIMESTAMP)
    User = db.relationship('User', backref='notifications')
